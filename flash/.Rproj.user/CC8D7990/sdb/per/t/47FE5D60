{
    "contents" : "#' backfitting for correction K factors model\n#'\n#' correction the factor and loading matrix estimation using backfitting algorithm\n#'\n#' @param Y is the data matrix (N by P)\n#' @param Lest is estimation for l to correct\n#' @param Fest is estimation for f to correct\n#' @param tautol this the stop criterion for convergence, number for iteration\n#' @param numtau number for iteration in flash rank one.\n#'\n#' @details greedy algorithm on the residual matrix to get a rank one matrix decomposition\n#'\n#' @export backfitting\n#'\n#' @importFrom ashr ash\n#'\n#' @return list of factor, loading and variance of noise matrix\n#'  \\itemize{\n#'   \\item{\\code{l}} {is a K by N matrix for loadings}\n#'   \\item{\\code{f}} {is a K by P matrix for factors}\n#'  }\n#' @examples\n#' N = 100\n#' P = 200\n#' Y = matrix(rnorm(N*P,0,1),ncol=P)\n#' g = flash_v_K(Y,10)\n#'\n\n# tautol is the number of iterations here\nbackfitting = function(Y,Lest,Fest,tautol=100,numtau = 500){\n  # backfitting with initial values\n  epsilon = 1\n  tau = 1\n  while(epsilon>1e-5 & tau < tautol){\n    tau = tau + 1\n    # if the l or f is a vector\n    if(is.vector(Lest) || is.vector(Fest)){\n      residual = Y - Lest %*% t(Fest)\n      preRMSfl = sqrt(mean((Lest %*% t(Fest))^2))\n      residual = residual + Lest %*% t(Fest)\n      r_flash = flash(residual,numtau = numtau)\n      Lest = r_flash$l\n      Fest = r_flash$f\n      residual = residual - Lest %*% t(Fest)\n    }else{\n      K = dim(Lest)[2]\n      # this one can be put out of the while loop\n      residual = Y - Lest %*% t(Fest)\n      preRMSfl = sqrt(mean((Lest %*% t(Fest))^2))\n      for(i in 1:K){\n        residual = residual + Lest[,i] %*% t(Fest[,i])\n        r_flash = flash(residual,numtau = numtau)\n        Lest[,i] = r_flash$l\n        Fest[,i] = r_flash$f\n        residual = residual - Lest[,i] %*% t(Fest[,i])\n      }\n      # remove the zero in the l and f\n      while(i <= dim(Lest)[2] ){\n        if(sum((Lest[,i])^2)==0 || sum((Fest[,i])^2)==0){\n          Lest = Lest[,-i]\n          Fest = Fest[,-i]\n        }\n        numfactor = ifelse(is.vector(Lest),1,dim(Lest)[2])\n        if(numfactor == 1){\n          break\n        }\n        i = i+1\n      }\n    }\n\n    RMSfl = sqrt(mean((Lest %*% t(Fest))^2))\n    epsilon = abs(preRMSfl - RMSfl)\n  }\n  return(list(l = Lest, f = Fest))\n}\n",
    "created" : 1455155997484.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1207137010",
    "id" : "47FE5D60",
    "lastKnownWriteTime" : 1455156080,
    "path" : "~/HG/ash-sfa/Rcode/postmean/flash/flash/R/backfitting.R",
    "project_path" : "R/backfitting.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}