{
    "contents" : "# to understand the different between posteriormean and VEM\nN = 100\nP = 200\nSF = 0.5\nSL = 1\nsignal = 1\ndata = sim(N, P, SF = SF, SL = SL, signal = signal)\nY = data$Y\nL_true = data$L_true\nF_true = data$F_true\nl = svd(Y)$u[,1]\nf = svd(Y)$v[,1]\nd = svd(Y)$d[1]\nE = data$Error\n\nl = svd(Y)$u[,1]\nf = as.vector(t(l)%*%Y)\nsigmae2 = mean(Y^2)\n\nsebeta=sqrt(sigmae2) * sqrt( 1 - sum((l%*%t(f))^2)/sum(Y^2) )\nsebeta = sebeta / (sqrt( sum(l^2)))\nf = est_f(Y,l,sebeta)\n\nsebeta=sqrt(sigmae2) * sqrt( 1 - sum((l%*%t(f))^2)/sum(Y^2) )\nsebeta = sebeta / (sqrt( sum(f^2)))\nl = est_l(Y,f,sebeta)\n\n# VEM\n\nEl = svd(Y)$u[,1]\nEl2 = El^2\nEf = as.vector(t(El)%*%Y)\nEf2 = Ef^2\n\n#start iteration\nsigmae2_v = mean( Y^2 - 2*Y*(El %*% t(Ef)) + (El2 %*% t(Ef2)) )\n#sigmae2_v = mean((Y - El %*% t(Ef))^2)\n\npar_f = ATM_f(Y,El,El2,sigmae2_v)\nEf = par_f$Ef\nEf2 = par_f$Ef2\n\n#plot(F_true,Ef)\n#points(F_true,f,col=\"skyblue\")\n\nsigmae2_v = mean( Y^2 - 2*Y*(El %*% t(Ef)) + (El2 %*% t(Ef2)) )\n#sigmae2\npar_l = ATM_l(Y,Ef,Ef2,sigmae2_v)\nEl = par_l$El\nEl2 = par_l$El2\n\n#plot(L_true,El)\n#points(L_true,l,col=\"skyblue\")\n\nsigmae2_v\n\nresidual_VEM = Y - El %*% t(Ef)\nresidual_flash = Y - l %*% t(f)\nsqrt(mean((residual_flash- E)^2))\nsqrt(mean((residual_VEM- E)^2))\n\n# for missing value\ndata = sim_K(K =3,N=60, P=100, SF = 0.99, SL = 0.95, signal = 6,noise = 1)\nY = data$Y\nL_true = data$L_true\nF_true = data$F_true\nl = svd(Y)$u[,1]\nf = svd(Y)$v[,1]\nd = svd(Y)$d[1]\nE = data$Error\nY[1:30,1:50] = NA\n#Y_new = Y\n#Y_new[is.na(Y_new)] = 0\n\nggreedy = flash_v_K(Y,K=20)\n# initial gl and gf as svd\ngl = ggreedy$l\ngf = ggreedy$f\nsqrt(mean(((Y  - gl%*%t(gf) )- E)^2,na.rm = TRUE))\ndim(gl)\ngback = backfitting(Y,gl,gf)\ngbl = gback$Lest\ngbf = gback$Fest\nsqrt(mean(((Y  - gbl%*%t(gbf) )- E)^2,na.rm = TRUE))\ndim(gbl)\n\nfor (i in 2:10){\n  out = PMD(Y,K = 2,sumabs = i/10)\n  E = data$Error\n  residual_PMD = Y -  out$u%*% diag(out$d) %*% t(out$v)\n  print(sqrt(mean((residual_PMD - E)^2,na.rm = TRUE)))\n}\neigenvalue = rep(0,dim(gl)[2])\nfor(i in 1:length(eigenvalue)){\n  eigenvalue[i] = (sqrt(mean((gl[,i]%*%t(gf[,i]))^2)))\n}\npar(mfrow = c(2,2))\nplot(out$d)\nplot(eigenvalue)\nimage(Y)\nimage(L_true %*% t(F_true))\nimage(gbl %*% t(gbf))\nimage(out$u%*% diag(out$d) %*% t(out$v))\n\n# test for outlier\nN = 100\nP = 2\nK = 3\nnoise = 1\nE = matrix(rnorm(N*P,0,noise),nrow=N)\nY = E\nL_true = array(0, dim = c(N,K))\nF_true = array(0, dim = c(P,K))\nSL = c(0.95,0.5,0.1)\nSF = c(0.95,0.5,0.1)\nsignal = c(10,1,1)\nfor(k in 1:2){\n  lstart = rnorm(N, 0, signal[k])\n  fstart = rnorm(P, 0, signal[k])\n\n  index = sample(seq(1:N),(N*SL[k]))\n  lstart[index] = 0\n  index = sample(seq(1:P),(P*SF[k]))\n  fstart[index] = 0\n\n  L_true[,k] = lstart\n  F_true[,k] = fstart\n\n  Y = Y + lstart %*% t(fstart)\n}\n\nfor (i in 2:10){\n  out = PMD(Y,K = 3,sumabs = i/10)\n  # E = data$Error\n  residual_PMD = Y -  out$u%*% diag(out$d) %*% t(out$v)\n  print(sqrt(mean((residual_PMD - E)^2,na.rm = TRUE)))\n}\n# not good\npar(mfrow = c(2,2))\nplot(Y[,1:2])\npoints(svdl[,1:2]%*% diag(svdd[1:2]) %*% t(svdf[,1:2]),col = \"red\")\npoints(out$u[,1:2]%*% diag(out$d[1:2]) %*% t(out$v[,1:2]),col= \"green\")\npoints(gbl[,1:2]%*%t(gbf[,1:2]),col = \"blue\")\npoints(L_true[,1:2] %*% t(F_true[,1:2]),col = \"skyblue\")\n\nplot(Y[,2:3])\npoints(svdl[,2:3]%*% diag(svdd[2:3]) %*% t(svdf[,2:3]),col = \"red\")\npoints(out$u[,2:3]%*% diag(out$d[2:3]) %*% t(out$v[,2:3]),col= \"green\")\npoints(gl[,2:3]%*%t(gf[,2:3]),col = \"blue\")\npoints(L_true[,2:3] %*% t(F_true[,2:3]),col = \"skyblue\")\n\nplot(Y[,1:3])\npoints(svdl[,1:3]%*% diag(svdd[1:3]) %*% t(svdf[,1:3]),col = \"red\")\npoints(out$u[,1:3]%*% diag(out$d[1:3]) %*% t(out$v[,1:3]),col= \"green\")\npoints(gl[,1:3]%*%t(gf[,1:3]),col = \"blue\")\npoints(L_true[,1:3] %*% t(F_true[,1:3]),col = \"skyblue\")\n# not good\nplot(as.vector(L_true %*% t(F_true)),as.vector(Y),xlim = c(-2,2),ylim = c(-2,2))\npoints(as.vector(L_true %*% t(F_true)),as.vector(gbl%*%t(gbf)),col = \"red\")\npoints(as.vector(L_true %*% t(F_true)),as.vector(out$u%*% diag(out$d) %*% t(out$v)),col = \"green\")\n# test the nonconstant case\nmu = 0\na = rchisq(10,1)/5\nb = rchisq(15,2)/6\nN = length(a)\nP = length(b)\nSIG = array(0,dim = c(N,P))\nsigmae2_v = mu + matrix(rep(a,P),ncol = P) + matrix(rep(b,each = N),ncol = P)\nsigmae2_v = exp(sigmae2_v)\nfor(i in 1:N){\n  for(j in 1:P){\n    SIG[i,j] = rnorm(1,0,sqrt(sigmae2_v[i,j]) )\n  }\n}\nsigmae2_v - exp(sigmaest(log(sigmae2_v)))\nsigmae2_v - sigmaest(sigmae2_v)\nSIG^2\nexp(sigmaest(log(SIG^2)))\nsum((sigmae2_v - exp(sigmaest(log(SIG^2))))^2)\nsum((sigmae2_v - SIG^2 )^2)\nsum((sigmae2_v - mean(SIG^2) )^2)\n# test the hd\nfor (i in 1:10){\n  out = PMD(Y,K = 1,sumabs = i/10)\n  # E = data$Error\n  residual_PMD = Y -  out$d * out$u%*% t(out$v)\n  print(sqrt(mean((residual_PMD - E)^2,na.rm = TRUE)))\n}\n\n\nsim_hd = function(N, P, SF, SL, signal, a = rchisq(N,3),b = rchisq(P,1),mu = 0){\n\n  E = matrix(rep(0,N*P),nrow=N)\n  sig2_true = matrix(rep(0,N*P),nrow=N)\n  for(i in 1:N){\n    for(j in 1:P){\n      sig2_true[i,j] = mu + a[i] + b[j]\n      E[i,j] = rnorm(1,0,sqrt(mu + a[i] + b[j]))\n    }\n  }\n\n  K=1\n  lstart = rnorm(N, 0, signal)\n\n  fstart = rnorm(P, 0, signal)\n\n  index = sample(seq(1:N),(N*SL))\n  lstart[index] = 0\n  index = sample(seq(1:P),(P*SF))\n  fstart[index] = 0\n\n  Y = lstart %*% t(fstart) + E\n\n  return(list(Y = Y, L_true = lstart, F_true = fstart, Error = E,sig2_true = sig2_true))\n}\ndata = sim_hd(N, P, SF, SL, signal, a = rchisq(N,3),b = rchisq(P,1),mu = 0)\n\n# test the flash_hd\ndata = sim(N, P, SF = SF, SL = SL, signal = signal)\nY = data$Y\nghd = flash_hd(Y,partype = \"constant\")\ngvem = flash_VEM(Y,tol=1e-6,numtau = 500)\n\n# try flash_hd\nN = 200\nP = 1000\nSF = 0.5\nSL = 0.5\nsignal = 1\ndata = sim_hd(N, P, SF, SL, signal, a = rchisq(N,3),b = rchisq(P,1),mu = 0)\nsigmae2_true = data$sig2_true\nY = data$Y\nE = data$Error\nghd = flash_hd(Y,partype = \"known\",sigmae2 = sigmae2_true)\nl = ghd$l\nf = ghd$f\nsqrt(mean(((Y - l %*% t(f))-E)^2))/sqrt(mean((Y - E)^2))\nghd = flash_hd(Y,partype = \"constant\")\nl = ghd$l\nf = ghd$f\nsqrt(mean(((Y - l %*% t(f))-E)^2))/sqrt(mean((Y - E)^2))\ngvem = flash_VEM(Y,tol=1e-6,numtau = 500)\nl = gvem$l\nf = gvem$f\nsqrt(mean(((Y - l %*% t(f))-E)^2))/sqrt(mean((Y - E)^2))\n\nfor (i in 1:10){\n  out = PMD(Y,K = 10,sumabs = i/10)\n  # E = data$Error\n  residual_PMD = Y -  out$d * out$u%*% t(out$v)\n  print(sqrt(mean((residual_PMD - E)^2,na.rm = TRUE))/sqrt(mean((Y - E)^2)))\n}\n",
    "created" : 1455155717353.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2803459220",
    "id" : "E561755B",
    "lastKnownWriteTime" : 1455155226,
    "path" : "~/HG/ash-sfa/Rcode/postmean/flash/temp_test.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}