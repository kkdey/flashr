library(flash)
library(flash)
?flash
?greedy
?flash
library(flash)
library("flash")
sim_K = function(K, N, P, SF, SL, signal,noise){
E = matrix(rnorm(N*P,0,noise),nrow=N)
Y = E
L_true = array(0, dim = c(N,K))
F_true = array(0, dim = c(P,K))
for(k in 1:K){
lstart = rnorm(N, 0, signal)
fstart = rnorm(P, 0, signal)
index = sample(seq(1:N),(N*SL))
lstart[index] = 0
index = sample(seq(1:P),(P*SF))
fstart[index] = 0
L_true[,k] = lstart
F_true[,k] = fstart
Y = Y + lstart %*% t(fstart)
}
return(list(Y = Y, L_true = L_true, F_true = F_true, Error = E))
}
data = sim_K(K=10,N=100, P=300, SF = 0.95, SL = 0.8, signal = 1.5,noise = 1)
Y = data$Y
L_true = data$L_true
F_true = data$F_true
E = data$Error
svdl = svd(Y)$u
svdf = svd(Y)$v
svdd = svd(Y)$d
plot(svdd)
svdK = 10
data = sim_K(K=10,N=100, P=300, SF = 0.95, SL = 0.8, signal = 1,noise = 1)
Y = data$Y
L_true = data$L_true
F_true = data$F_true
E = data$Error
svdl = svd(Y)$u
svdf = svd(Y)$v
svdd = svd(Y)$d
plot(svdd)
svdK = 10
svdK = 10
sqrt(mean(((Y  - svdl[,1:svdK]%*% diag(svdd[1:svdK]) %*% t(svdf[,1:svdK]) )- E)^2)) / sqrt(mean(((Y - 0)- E)^2))
#sqrt(mean(((Y  - svdd[1] * svdl[,1] %*%  t(svdf[,1]) )- E)^2)) / sqrt(mean(((Y - 0)- E)^2))
ggreedy = greedy(Y,K=30)
# initial gl and gf as svd
gl = ggreedy$l
gf = ggreedy$f
dim(gl)
sqrt(mean(((Y  - gl%*%t(gf) )- E)^2)) / sqrt(mean(((Y - 0)- E)^2))
# proportion in
eigenvalue = rep(0,dim(gl)[2])
for(i in 1:length(eigenvalue)){
eigenvalue[i] = (sqrt(mean((gl[,i]%*%t(gf[,i]))^2)))
}
eigenvalue = eigenvalue / sqrt(mean(Y^2))
plot(eigenvalue)
gback = backfitting(Y,gl,gf,tautol = 100, numtau = 5)
gbl = gback$Lest
gbf = gback$Fest
dim(gbl)
sqrt(mean(((Y  - gbl%*%t(gbf) )- E)^2)) / sqrt(mean(((Y - 0)- E)^2))
gbf
gback = backfitting(Y,gl,gf,tautol = 100, numtau = 5)
gbl = gback$l
gbf = gback$f
dim(gbl)
sqrt(mean(((Y  - gbl%*%t(gbf) )- E)^2)) / sqrt(mean(((Y - 0)- E)^2))
library(flash)
